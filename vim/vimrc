let mapleader = " "
set nocompatible


"===============================================================================
" Options:
"===============================================================================
set background=dark
syntax on

" different color for each paren pairs
let vimclojure#ParenRainbow = 1

set path+=**
set autoindent
set autoread
set backspace=indent,eol,start
set directory=/tmp/
set display=lastline
set encoding=UTF-8
set expandtab tabstop=2 softtabstop=2 shiftwidth=2
set guicursor=a:blinkon0
set hidden
set hlsearch
set ignorecase smartcase
set laststatus=2
set list
set listchars=tab:>\ ,trail:-,extends:>,precedes:<,nbsp:+
set mouse=""
set nobackup
set noincsearch
set noswapfile
set nowrap
set number numberwidth=2
set pastetoggle=<F3>
set ruler rulerformat=%=%l/%L
set novisualbell " visualbel causes some weird char when in gnome terminal
set showcmd
set showmatch
set smarttab
set splitbelow
set splitright
set tabpagemax=20
set tags+=./tags.vendors
set tags+=tags-php
set tags+=tags-ruby
set tags+=tags-js
set tags+=gems.tags
set ttyfast
set wildignore+=*.so,*.swp,*.zip,*/build/*,*/coverage/*     " MacOSX/Linux
set wildmenu
set wildmode=list:longest,full

" https://www.reddit.com/r/vim/comments/57huhd/any_idea_why_terminal_vim_isnt_correctly/
" Attempt to fix rendering
if &term =~ '256color'
  set t_ut=
endif

" Conditional settings
if exists("+undodir")
  set undodir=~/.vimundodir
  set undofile
  if filewritable(&undodir) == 0
    call mkdir(&undodir, "p")
  endif
endif

if exists("+colorcolumn")
  set colorcolumn=80
endif

if has("mac")
  set clipboard=unnamed
elseif has("unix")
  set clipboard=unnamedplus
endif

" Performance improvments
if has("mac")
  set nocursorline

  if exists("+relativenumber")
    set norelativenumber
  endif

  set foldlevel=0
  set foldmethod=manual
endif

"===============================================================================
" Autocommands:
"===============================================================================
autocmd BufWrite * :call <sid>MkdirsIfNotExists(expand("<afile>:h"))

" TODO: find out why it wont work when the function is not herer
function! <SID>MkdirsIfNotExists(directory)
  if(!isdirectory(a:directory))
    call system("mkdir -p ".shellescape(a:directory))
  endif
endfunction

" remember last position in file
autocmd BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$") | exe "normal g'\"" | endif

" Thorfile, Rakefile, Vagrantfile, and Gemfile are Ruby
autocmd BufRead,BufNewFile {Gemfile,Rakefile,Vagrantfile,Thorfile,config.ru} set ft=ruby

" hb is handlebars
autocmd BufNewFile,BufRead *.hb set ai filetype=handlebars

" hbs is handlebars
autocmd BufNewFile,BufRead *.hbs set ai filetype=handlebars

" JSON is JS
autocmd BufNewFile,BufRead *.json set ai filetype=javascript

" enable spell check
autocmd FileType gitcommit setlocal spell spelllang=en_us,pt_br,de_de
autocmd BufRead,BufNewFile *.md setlocal spell spelllang=en_us,pt_br,de_de
autocmd BufRead,BufNewFile *.txt setlocal spell spelllang=en_us,pt_br,de_de

"===============================================================================
" Pluggins
"===============================================================================
call plug#begin('~/.vimplugged')

Plug 'rking/ag.vim'

" nnoremap g# :Ag! -w <C-R><C-W><space>
nnoremap <leader>ag :Ag!<space>
vnoremap <leader>ag y:Ag! '<C-R>"'
nnoremap <leader>lag :Ag<up><cr>
nnoremap <leader>ga :AgAdd!<space>
nnoremap <leader>g# :Ag! -w <C-R><C-W><space>
nnoremap <leader>gn :cnext<CR>
nnoremap <leader>gp :cprev<CR>
nnoremap <leader>gq :ccl<CR>
nnoremap <leader>gl :cwindow<CR>

Plug 'weierophinney/argumentrewrap'

nnoremap <leader>wa :call argumentrewrap#RewrapArguments()<CR>

Plug 'yukunlin/auto-pairs' " fixed 'jiangmiao/auto-pairs'

" TODO: test plugins http://web-techno.net/vim-php-ide/

Plug 'Lokaltog/vim-easymotion'
Plug 'airblade/vim-gitgutter'
Plug 'austintaylor/vim-commaobject'
Plug 'joonty/vdebug'
Plug 'kana/vim-textobj-user'
Plug 'tomtom/tcomment_vim'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-speeddating'
Plug 'tpope/vim-surround'

" Colors
" Plug 'chriskempson/base16-vim'
" Plug 'flazz/vim-colorschemes'
" Plug 'altercation/vim-colors-solarized'
Plug 'endel/vim-github-colorscheme'
Plug 'jonathanfilip/vim-lucius'
Plug 'chriskempson/base16-vim'
Plug 'nanotech/jellybeans.vim'
Plug 'mhartington/oceanic-next'

" templates
Plug 'slim-template/vim-slim'

Plug 'mechatroner/rainbow_csv'

Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
  nnoremap <c-p> :FZF<cr>
  nnoremap <mleader>rm :Remove<cr>

let g:fzf_action = {
  \ 'ctrl-t': 'tab split',
  \ 'ctrl-s': 'split',
  \ 'ctrl-v': 'vsplit' }

Plug 'mattn/emmet-vim'
Plug 'tpope/vim-eunuch'

nnoremap <leader>mv :Move<space>
nnoremap <leader>rn :Rename<space>
nnoremap <leader>rm :Delete<cr>

Plug 'tpope/vim-fugitive'

" vim fugitive
autocmd BufReadPost fugitive://* set bufhidden=delete
nnoremap <Leader>gac :Gcommit -am ""<LEFT>
nnoremap <Leader>gc :Gcommit -m ""<LEFT>
nnoremap <Leader>gs :Gstatus<CR>
nnoremap <leader>gw :Gwrite<cr>
nnoremap <leader>gb :Gblame<cr>

" Resolving conflics
" Vimcasts #33
" also https://www.youtube.com/watch?v=PO6DxfGPQvw
" nnoremap <leader>gd :Gdiff<cr>
" " get target version: diff get target
" nnoremap <leader>dgt :diffget //2 \| :diffupdate<cr>
" " get branch version: diff get branch
" nnoremap <leader>dgb :diffget //3 \| :diffupdate<cr>

noremap <leader>g1 :diffget //1<CR>
noremap <leader>gj :diffget //3<CR>
noremap <leader>gf :diffget //2<CR>


Plug 'mattn/webapi-vim' " gist-vim dependency
Plug 'mattn/gist-vim'

" gist
if has("mac")
  let g:gist_clip_command = 'pbcopy'
elseif has("unix")
  let g:gist_clip_command = 'xclip -selection clipboard'
endif

let g:gist_detect_filetype = 1
let g:gist_open_browser_after_post = 1

Plug 'jparise/vim-graphql'
Plug 'othree/html5.vim'

" it looks weird on nvim
if !has('nvim')
  Plug 'Yggdroot/indentLine'
  let g:indentLine_char = '‚ñè'
endif

" PHP plugins

" TODO: A good read for autocompletion. I need to make it work
" https://phpactor.github.io/phpactor/vim-plugin.html"

" An up-to-date Vim syntax for PHP.
Plug 'StanAngeloff/php.vim'

Plug 'captbaritone/better-indent-support-for-php-with-html'

Plug 'arnaud-lb/vim-php-namespace'
nnoremap <Leader>u <C-O>:call PhpInsertUse()<CR>
function! IPhpInsertUse()
    call PhpInsertUse()
    call feedkeys('a',  'n')
endfunction
autocmd FileType php inoremap <Leader>u <Esc>:call IPhpInsertUse()<CR>
autocmd FileType php noremap <Leader>u :call PhpInsertUse()<CR>

Plug 'docteurklein/php-getter-setter.vim'

autocmd FileType php nnoremap <leader>pg :InsertGetterOnly<cr>
autocmd FileType php nnoremap <leader>ps :InsertSetterOnly<cr>
autocmd FileType php nnoremap <leader>pgs :InsertBothGetterSetter<cr>


Plug 'roxma/ncm-phpactor'
Plug 'phpactor/phpactor' ,  {'do': 'composer install'}
autocmd FileType php setlocal omnifunc=phpactor#Complete


" Include use statement
autocmd FileType php nmap <Leader>u :call phpactor#UseAdd()<CR>

" Invoke the context menu
autocmd FileType php nmap <Leader>mm :call phpactor#ContextMenu()<CR>

" Goto definition of class or class member under the cursor
autocmd FileType php nmap <Leader>o :call phpactor#GotoDefinition()<CR>

" Transform the classes in the current file
autocmd FileType php nmap <Leader>tt :call phpactor#Transform()<CR>

" Generate a new class (replacing the current file)
autocmd FileType php nmap <Leader>cc :call phpactor#ClassNew()<CR>

" Extract method from selection
autocmd FileType php vmap <silent><Leader>em :<C-U>call phpactor#ExtractMethod()<CR>

" ruby
Plug 'nelstrom/vim-textobj-rubyblock'
Plug 'vim-scripts/ruby-matchit'
Plug 'vim-ruby/vim-ruby'
Plug 'tpope/vim-rails'
Plug 'ngmy/vim-rubocop'
" Plug 'uptech/vim-open-alternate'
Plug 'noprompt/vim-yardoc'
Plug 'hallison/vim-rdoc'


" rubocop
let g:vimrubocop_keymap = 0

autocmd FileType ruby nnoremap <leader>ccs :RuboCop<cr>
autocmd FileType ruby nnoremap <leader>av :call OpenAlternateFile()<cr>

" rails.vim
" nnoremap <leader>av :AV<cr>
nnoremap <leader>as :AS<cr>
nnoremap <Leader>va :AV<cr>
nnoremap <Leader>sa :AS<cr>
nnoremap <Leader>vc :RVcontroller<cr>
nnoremap <Leader>sc :RScontroller<cr>
nnoremap <Leader>vu :RVunittest<CR>
nnoremap <Leader>su :RSunittest<CR>
nnoremap <Leader>vv :RVview<cr>
nnoremap <Leader>sv :RSview<cr>
nnoremap <Leader>m :Rmodel<cr>
nnoremap <Leader>sm :RSmodel<cr>
nnoremap <Leader>vm :RVmodel<cr>

" Javascript plugins

" Plug 'othree/javascript-libraries-syntax.vim'
" Plug 'vim-scripts/JavaScript-Indent'
Plug 'pangloss/vim-javascript'
Plug 'kchmck/vim-coffee-script'
Plug 'isRuslan/vim-es6'
Plug 'mxw/vim-jsx'
Plug 'HerringtonDarkholme/yats.vim'

" mxw/vim-jsx
let g:jsx_ext_required = 0

" End of language specific plugins

Plug 'scrooloose/syntastic'

" syntastic is too slow for haml and sass
let g:syntastic_mode_map = { 'mode': 'active',
                           \ 'active_filetypes': [],
                           \ 'passive_filetypes': ['haml','scss','sass'] }

let g:syntastic_php_phpcs_args='--standard=PSR2'

Plug 'itchyny/lightline.vim'

" itchyny/lightline.vim
let g:lightline = {
      \ 'colorscheme': 'jellybeans',
      \ 'component_function': {
      \   'filename': 'LightlineFilename',
      \ },
      \ }


let g:lightline.enable = {
      \ 'statusline': 1,
      \ 'tabline': 0
      \ }

function! LightlineFilename()
  return expand('%:t') !=# '' ? expand('%:f') : '[No Name]'
endfunction

let g:unite_force_overwrite_statusline = 0
let g:vimfiler_force_overwrite_statusline = 0
let g:vimshell_force_overwrite_statusline = 0

Plug 'scrooloose/nerdtree'

Plug 'godlygeek/tabular'

" tabular
function! CustomTabularPatterns()
  if exists('g:tabular_loaded')
    AddTabularPattern! symbols / :/l0
    AddTabularPattern! hash /^[^>]*\zs=>/
    AddTabularPattern! chunks / \S\+/l0
    AddTabularPattern! assignment / = /l0
    AddTabularPattern! comma /^[^,]*,/l1
    AddTabularPattern! colon /:\zs /l0
    AddTabularPattern! options_hashes /:\w\+ =>/
  endif
endfunction

autocmd VimEnter * call CustomTabularPatterns()

nnoremap <leader>a\| :Tabularize /\|<CR>
vnoremap <leader>a\| :Tabularize /\|<CR>
nnoremap <leader>a= :Tabularize /=<CR>
vnoremap <leader>a= :Tabularize /=<CR>
nnoremap <leader>a: :Tabularize /:\zs<CR>
vnoremap <leader>a: :Tabularize /:\zs<CR>
nnoremap <leader>ar :Tabularize /=><CR>
vnoremap <leader>ar :Tabularize /=><CR>

let NERDTreeShowHidden=1
" nerdtree
nnoremap <c-n> :NERDTreeToggle<CR>


Plug 'sirver/ultisnips'
Plug 'mjacobus/vim-snippets'

" Ultisnips
" If you want :UltiSnipsEdit to split your window.
let g:UltiSnipsEditSplit="vertical"
let g:snips_author="Marcelo Jacobus <marcelo.jacobus@gmail.com>"

Plug 'janko-m/vim-test'

" vim test
nnoremap <silent> <leader>t :TestNearest<CR>
nnoremap <silent> <leader>T :TestFile<CR>
nnoremap <silent> <leader>at :TestSuite<CR>
nnoremap <silent> <leader>lt :TestLast<CR>
nnoremap <silent> <leader>gt :TestVisit<CR>

let g:test#javascript#jasmine#file_pattern = '\v^.*spec\.(js|jsx|coffee)$'


" let test#ruby#spec_framework = "minitest"
let test#ruby#spec_framework = "rspec"
nnoremap <leader><leader>t :call SwitchSpecCommand()<cr>

function! SwitchSpecCommand()
  if g:test#ruby#spec_framework == "rspec"
    let g:test#ruby#minitest#file_pattern = '_\(spec\|test\)\.rb'
    let g:test#ruby#spec_framework = "minitest"
  else
    " vim test will trigger rspec
    let g:test#ruby#minitest#file_pattern = '_test\.rb'
    let g:test#ruby#spec_framework = "rspec"
  endif

  echo "using " . g:test#ruby#spec_framework . " for _spec.rb"
endfunction

" let test#strategy = "dispatch_background"


" vim-to-cterm
Plug 'shawncplus/Vim-toCterm'
nnoremap tocterm :source ~/.vimplugged/Vim-toCterm/tocterm.vim<CR>

" common files for vim and neovim
for f in split(glob('~/.vim/plugins/*.vim'), '\n')
  exe 'source' f
endfor

call plug#end()

source ~/.vim/functions.vim
source ~/.vim/abbreviations.vim
source ~/.vim/mappings.vim


"===============================================================================
" Appearence:
"===============================================================================
" colorscheme lucius

let base16colorspace=256
colorscheme base16-tomorrow-night
colorscheme OceanicNext
" colorscheme jellybeans
call FixColors()
hi Normal guibg=NONE ctermbg=NONE
hi Normal guibg=NONE ctermbg=NONE
hi EndOfBuffer guibg=NONE ctermbg=NONE


"===============================================================================
" Allow overriding these settings:
"===============================================================================
if filereadable(expand("~/.vimrc.local"))
  source ~/.vimrc.local
endif

if filereadable(".project.vim")
  source .project.vim
endif

if filereadable(".editor/project.vim")
  source .editor/project.vim
endif
